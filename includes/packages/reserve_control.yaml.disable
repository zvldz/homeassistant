group:
  active_automations:
    entities:
      - automation.ha_persistent_notification
      - automation.hacs_persistent_notification
      - automation.ha1_server_off_reserve_control
      - automation.check_ha1_on_start
      - automation.sync_input_boolean
      - automation.sync_thermostat_temperature
      - automation.gas_counter
      - automation.system_entity_change
      - automation.system_database_purge
#     - automation.system_start
#     - automation.system_error_counter
#     - automation.system_warning_counter
#     - automation.reset_system_counters

  sync_input_boolean:
    entities:
      - sensor.ha1_gas_boiler_schedule
      - sensor.ha1_auto_turn_off_lights
      - sensor.ha1_auto_fan
      - sensor.ha1_vacuum_schedule
      - sensor.ha1_vacuum_notification

sensor:
  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/input_boolean.gas_boiler_schedule"
    name: ha1_gas_boiler_schedule
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.state }}"

  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/input_boolean.auto_turn_off_lights"
    name: ha1_auto_turn_off_lights
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.state }}"

  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/input_boolean.auto_fan"
    name: ha1_auto_fan
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.state }}"

  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/input_boolean.vacuum_schedule"
    name: ha1_vacuum_schedule
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.state }}"

  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/input_boolean.vacuum_notification"
    name: ha1_vacuum_notification
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.state }}"

  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/climate.gas_boiler"
    name: ha1_thermostat_temperature
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.attributes.temperature }}"

  - platform: rups
    name: raspberry_ups

rest_command:
  ha1_set_input_boolean:
    url: "{{ states('input_text.ha1_url') }}api/services/input_boolean/turn_{{ set_state }}"
    method: POST
    headers:
      authorization: !secret ha1_token
    payload: '{"entity_id":"{{ set_entity_id }}"}'

automation:
  - alias: sync_input_boolean
    initial_state: true
    trigger:
      - platform: state
#       entity_id: group.sync_input_boolean # not working
        entity_id:
          - sensor.ha1_gas_boiler_schedule
          - sensor.ha1_auto_turn_off_lights
          - sensor.ha1_auto_fan
          - sensor.ha1_vacuum_schedule
          - sensor.ha1_vacuum_notification
    condition:
      - condition: template
        value_template: '{{ (state_attr("sensor.ha1_uptime", "state") | int(0)) > 0 }}'
    action:
      - service: >
          {% if trigger.to_state.state == 'on' and trigger.from_state.state == 'off' %}
            input_boolean.turn_on
          {% elif trigger.to_state.state == 'off' and trigger.from_state.state == 'on' %}
            input_boolean.turn_off
          {% else %}
            {{ trigger.to_state }}
          {% endif %}
        data:
          entity_id: "{{ trigger.entity_id | replace('sensor.ha1_', 'input_boolean.')}}"

  - alias: turn_off_automation
    initial_state: true
    trigger:
      - platform: homeassistant
        event: start
    action:
      - service: script.turn_on
        entity_id: script.turn_off_most_automation

  - alias: ha1_server_on_return_control
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.ha1_uptime
        from: "unavailable"
    action:
      - delay: 00:00:30
      - service: notify.telegram
        data:
          message: "\U00002747 {{ states.sensor.date_time.state }} | HA1 is now working. Return of control to main !!!"
      - service: script.turn_on
        entity_id: script.sync_input_boolean_to_ha1
      - service: script.turn_on
        entity_id: script.turn_off_most_automation

  - alias: check_ha1_on_start
    initial_state: true
    trigger:
      - platform: homeassistant
        event: start
#     - platform: time_pattern
#       minutes: '/1'
    condition:
      - condition: template
        value_template: "{{ states.sensor.ha1_uptime is none }}"
    action:
      - service: notify.telegram
        data:
          message: "\U0001F680 {{ states.sensor.date_time.state }} | HA1 is not working. Take control !!!"
      - service: automation.turn_on
        entity_id: all

  - alias: ha1_server_off_reserve_control
    trigger:
      - platform: state
        entity_id: sensor.ha1_uptime
        to: "unavailable"
        for: "00:01:00"
    action:
      - service: notify.telegram
        data:
          message: "\U0001F680 {{ states.sensor.date_time.state }} | HA1 is not working. Take control !!!"
      - service: automation.turn_on
        entity_id: all

  - alias: sync_thermostat_temperature
    trigger:
      - platform: state
        entity_id: sensor.ha1_thermostat_temperature
    condition:
      - condition: numeric_state
        entity_id: sensor.ha1_thermostat_temperature
        below: 40
    action:
      - service: climate.set_temperature
        data:
          entity_id: climate.gas_boiler
          temperature: "{{ states('sensor.ha1_thermostat_temperature') | float }}"

script:
  sync_input_boolean_to_ha1:
    alias: "Sync input_boolean state to ha1"
    sequence:
      repeat:
        count: "{{ states.group.sync_input_boolean.attributes.entity_id | count }}"
        sequence:
          - service: rest_command.ha1_set_input_boolean
            data:
              set_entity_id: "{{ states.group.sync_input_boolean.attributes.entity_id[repeat.index-1] | replace('sensor.ha1_', 'input_boolean.') }}"
              set_state: "{{ states(states.group.sync_input_boolean.attributes.entity_id[repeat.index-1] | replace('sensor.ha1_', 'input_boolean.'))}}"

  turn_off_most_automation:
    alias: "Turn off most automation"
    sequence:
      - service: automation.turn_off
        entity_id: all
      - delay: '00:00:30'
      - service: homeassistant.turn_on
        entity_id: group.active_automations

  reboot_ha1:
    alias: "Reboot HA1"
    sequence:
      - service: switch.turn_off
        entity_id:
          - switch.power_strip_1_relay2
          - switch.power_strip_1_relay4
      - delay: '00:00:02'
      - service: switch.turn_on
        entity_id: switch.power_strip_1_relay4
      - delay: '00:00:15'
      - service: switch.turn_on
        entity_id: switch.power_strip_1_relay2

