python_script:

input_boolean:
  pump_schedule:
    name: "Pump work on schedule (Winter)"
    icon: "mdi:timer-outline"
  gas_boiler_schedule:
    name: "Boiler work on schedule (Winter)"
    icon: "mdi:timer-outline"

input_text:
  tessla_user:
    initial: !secret tessla_user
  tessla_pass:
    initial: !secret tessla_pass
  tessla_device_id:
    initial: !secret tessla_device_id

input_number:
  gas_counter:
    name: "Gas Counter"
    icon: "mdi:fire"
    mode: box
    min: 0.0
    max: 99999.999

climate:
  - platform: generic_thermostat
    name: "Gas Boiler"
    heater: switch.gas_boiler
    target_sensor: sensor.temperature_158d000231f03e
    ac_mode: false
    min_temp: 15
    max_temp: 25
    away_temp: 17
    cold_tolerance: 0.2
    hot_tolerance: 0.3
    min_cycle_duration:
      minutes: 5

sensor:
  - platform: template
    sensors:
      thermostat_current_temp:
        friendly_name: "T Current"
        value_template: "{{ state_attr('sensor.thermostat_info', 'TEMPERATURE_2') }}"
        unit_of_measurement: '°C'
      thermostat_set_temp:
        friendly_name: "T Required"
        value_template: "{{ state_attr('sensor.thermostat_info', 'TEMPERATURE_1') }}"
        unit_of_measurement: "°C"
      thermostat_reley_status:
        friendly_name: "T Rele"
        value_template: >
          {% if is_state('sensor.thermostat_info', '4') %}
            ON
          {% elif is_state('sensor.thermostat_info', '3') %}
            OFF
          {% elif is_state('sensor.thermostat_info', '2') %}
            DISABLED
          {% else %}
            UNKNOWN
          {% endif %}

# RELE - status of reley. 2 - disabled. 3 - turn off, 4 - turn on
# ACTIVE - status of device. null - disabled, 5 - enabled

  - platform: command_line
    name: thermostat_info
    command_timeout: 30
    scan_interval: 60
    value_template: "{{ value_json.RELE }}"
    json_attributes:
      - TEMPERATURE_1
      - TEMPERATURE_2
      - RELE
      - ACTIVE
    command: "/config/bin/tessla.sh --login={{ states('input_text.tessla_user') }} --password={{ states('input_text.tessla_pass') }} --device-id={{ states('input_text.tessla_device_id') }} --status"

  - platform: rest
    resource_template: "{{ states('input_text.ha1_url') }}api/states/input_number.gas_counter"
    name: ha1_gas_counter
    headers:
      authorization: !secret ha1_token
    value_template: "{{ value_json.state }}"

  - platform: rest
    resource_template: "{{ states('input_text.ha2_url') }}api/states/input_number.gas_counter"
    name: ha2_gas_counter
    headers:
      authorization: !secret ha2_token
    value_template: "{{ value_json.state }}"


switch:
  - platform: template
    switches:
      gas_boiler:
        value_template: "{{ is_state('sensor.thermostat_reley_status', 'ON') }}"
        availability_template: "{{ is_state('sensor.thermostat_reley_status', 'ON') or is_state('sensor.thermostat_reley_status', 'OFF')}}"
        turn_on:
          service: script.turn_on
          data:
            entity_id: script.gas_boiler_turn_on
        turn_off:
          service: script.turn_on
          data:
            entity_id: script.gas_boiler_turn_off

shell_command:
  gas_boiler_on: "/config/bin/tessla.sh --login={{ states('input_text.tessla_user') }} --password={{ states('input_text.tessla_pass') }} --device-id={{ states('input_text.tessla_device_id') }} --set-temp=23"
  gas_boiler_off: "/config/bin/tessla.sh --login={{ states('input_text.tessla_user') }} --password={{ states('input_text.tessla_pass') }} --device-id={{ states('input_text.tessla_device_id') }} --set-temp=15"

script:
  gas_boiler_turn_on:
    alias: "Gas Boiler Turn On"
    sequence:
      - service: shell_command.gas_boiler_on
      - service: python_script.set_state
        data:
          entity_id: sensor.thermostat_info
          state: '4'

  gas_boiler_turn_off:
    alias: "Gas Boiler Turn Off"
    sequence:
      - service: shell_command.gas_boiler_off
      - service: python_script.set_state
        data:
          entity_id: sensor.thermostat_info
          state: '3'

  sync_gas_counter_with_ha1:
    alias: "Sync gas counter with ha1"
    sequence:
      - service: input_number.set_value
        data:
          entity_id: input_number.gas_counter
          value: "{{ states('sensor.ha1_gas_counter') }}"

  sync_gas_counter_with_ha2:
    alias: "Sync gas counter with ha2"
    sequence:
      - service: input_number.set_value
        data:
          entity_id: input_number.gas_counter
          value: "{{ states('sensor.ha2_gas_counter') }}"


automation:
  - alias: "Time Pump Off"
    initial_state: true
    trigger:
      - platform: time
        at: '09:00:00'
    condition:
      - condition: state
        entity_id: input_boolean.pump_schedule
        state: 'on'
    action:
      - service: switch.turn_off
        entity_id: switch.sonoff_pump_relay

  - alias: "Time Pump On"
    initial_state: true
    trigger:
      - platform: time
        at: '16:30:00'
    condition:
      - condition: state
        entity_id: input_boolean.pump_schedule
        state: 'on'
    action:
      - service: switch.turn_on
        entity_id: switch.sonoff_pump_relay

# cond state on
  - alias: "Turn off heating if kitchen temp above 23"
    initial_state: true
    trigger:
      - platform: numeric_state
        entity_id: sensor.temperature_158d0002ca0395
        above: 23
    condition:
      - condition: state
        entity_id: switch.gas_boiler
        state: 'on'
    action:
      - service: switch.turn_off
        entity_id:
          - switch.gas_boiler
          - switch.sonoff_pump_relay

  - alias: "Set temperature to 20.5 on schedule"
    initial_state: true
    trigger:
      - platform: time
        at:
          - '06:00:00'
          - '17:00:00'
    condition:
      - condition: state
        entity_id: input_boolean.gas_boiler_schedule
        state: 'on'
    action:
      - service: climate.set_temperature
        data:
          entity_id: climate.gas_boiler
          temperature: 20.5
          hvac_mode: heat
      - service: switch.turn_on
        entity_id: switch.sonoff_pump_relay

  - alias: "Set temperature to 17 on schedule"
    initial_state: true
    trigger:
      - platform: time
        at:
          - '09:15:00'
          - '00:00:00'
    condition:
      - condition: state
        entity_id: input_boolean.gas_boiler_schedule
        state: 'on'
    action:
      - service: climate.set_temperature
        data:
          entity_id: climate.gas_boiler
          temperature: 17
          hvac_mode: heat
      - service: switch.turn_off
        entity_id: switch.sonoff_pump_relay

  - alias: gas_counter
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.door_window_sensor_158d00039461dd
      from: 'on'
      to: 'off'
      for:
        seconds: 3
    action:
      - service: input_number.set_value
        data:
          entity_id: input_number.gas_counter
          value: "{{ (states.input_number.gas_counter.state|float + 0.01 ) | round(2) }}"

utility_meter:
  gas_hourly:
    source: input_number.gas_counter
    cycle: hourly
  gas_daily:
    source: input_number.gas_counter
    cycle: daily
  gas_monthly:
    source: input_number.gas_counter
    cycle: monthly
  gas_yearly:
    source: input_number.gas_counter
    cycle: yearly

